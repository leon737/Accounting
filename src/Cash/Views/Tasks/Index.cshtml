@using MvcBlanket.Helpers
@using Cash.Domain.Models
@using SortDirection = MvcBlanket.SortDirection
@model Cash.Web.Models.DisplayTreeTaskViewModel

@{
    ViewBag.Title = "Список задач";
}

<h2>@ViewBag.Title</h2>

@if (Model.Task != null)
{

    var list = new List<Task>();
    var t = Model.Task.Parent;
    while (t != null)
    {
        list.Add(t);
        t = t.Parent;
    }
    
    <p>
        @Html.ActionLink("Верхний уровень", "Index", new {id = (int?)null})
        @foreach (var i in list)
        {
            <text> > </text>
            @Html.ActionLink($"#{i.Id} {i.Name}", "Index", new {id = i.Id})
        }
        > <strong>@($"#{Model.Task.Id} {Model.Task.Name}")</strong>
    </p>
}


<p>
    @Html.ActionLink("Создать новую задачу", "Create", new { id = Model.Task?.Id })
</p>
<table class="table">
    <tr>
        <th>
            @Html.SortLink(Html.DisplayNameFor(model => model.Tasks.PagedList.FirstOrDefault().Name).ToString(), "Index", "Id", SortDirection.Ascending)
        </th>
        <th>
            @Html.SortLink(Html.DisplayNameFor(model => model.Tasks.PagedList.FirstOrDefault().Workload).ToString(), "Index", "Workload", SortDirection.Descending)
        </th>
        <th>
            @Html.SortLink(Html.DisplayNameFor(model => model.Tasks.PagedList.FirstOrDefault().StartDate).ToString(), "Index", "StartDate", SortDirection.Ascending)
        </th>
        <th>
            @Html.SortLink(Html.DisplayNameFor(model => model.Tasks.PagedList.FirstOrDefault().Importance).ToString(), "Index", "Importance", SortDirection.Descending)
        </th>
        <th>
            @Html.SortLink(Html.DisplayNameFor(model => model.Tasks.PagedList.FirstOrDefault().TaskType).ToString(), "Index", "TaskType", SortDirection.Ascending)
        </th>
        <th>
            @Html.SortLink(Html.DisplayNameFor(model => model.Tasks.PagedList.FirstOrDefault().TaskStatus).ToString(), "Index", "TaskStatus", SortDirection.Ascending)
        </th>
        <th>
            @Html.SortLink(Html.DisplayNameFor(model => model.Tasks.PagedList.FirstOrDefault().Active).ToString(), "Index", "Active", SortDirection.Descending)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model.Tasks.PagedList)
    {
        <tr>
            <td>
                @Html.ActionLink($"#{item.Id} {item.Name} ({item.ChildrenCount})", "Index", new { id = item.Id })
            </td>
            <td>
                @($"{item.Workload}{(item.WorkloadAutoCalc ? "*" : "")}")
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StartDate)
            </td>
            <td>
                <span class="importance">
                    @Html.DisplayFor(modelItem => item.Importance)
                </span>
                <span class="set-importance-down" data-task-id="@item.Id">▼</span>
                <span class="set-importance-up" data-task-id="@item.Id">▲</span>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TaskType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TaskStatus)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Active)
            </td>
            <td>
                <a href="@Url.Action("Edit", new {id = item.Id})" class="btn btn-info btn-sm">
                    <span class="glyphicon glyphicon-pencil"></span>
                </a>
                
                <a href="@Url.Action("Details", new {id = item.Id})" class="btn btn-info btn-sm">
                    <span class="glyphicon glyphicon-search"></span>
                </a>
                
                <a href="@Url.Action("Delete", new {id = item.Id})" class="btn btn-info btn-sm">
                    <span class="glyphicon glyphicon-remove"></span>
                </a>
            </td>
        </tr>
    }

</table>
